<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Top</title>
    <url>/2021/07/09/%E6%9B%B4Top/</url>
    <content><![CDATA[<h3 id="版本："><a href="#版本：" class="headerlink" title="版本："></a>版本：</h3><p>hexo 5.4</p>
<p>next 7.8</p>
<h3 id="hexo-github-常用指令："><a href="#hexo-github-常用指令：" class="headerlink" title="hexo + github 常用指令："></a>hexo + github 常用指令：</h3><p>新建文章：<code>hexo n 文章名</code></p>
<p>发布到本地：<code>hexo s</code></p>
<p>部署到github：<code>hexo clean</code> ， <code>hexo g -d</code></p>
<p>备份源文件到github：<code>git add .</code> ， <code>git commit -m 备注</code> ，  <code>git push origin hexo</code></p>
]]></content>
      <categories>
        <category>琐碎</category>
      </categories>
  </entry>
  <entry>
    <title>《Speed Down》Unity2d游戏开发（二）</title>
    <url>/2021/07/13/%E6%9B%B42021-07-13-%E3%80%8ASpeed%20Down%E3%80%8BUnity2d%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="始、前言"><a href="#始、前言" class="headerlink" title="始、前言"></a>始、前言</h3><p>上一次已经完成了场景搭建，那么这次的主要任务就是制作跳跃平台</p>
<!---more--->

<hr>
<h3 id="一、普通平台"><a href="#一、普通平台" class="headerlink" title="一、普通平台"></a>一、普通平台</h3><p>1.选中pixel adventure 1 → assets → traps → falling platform 设置pixels per unit为16</p>
<p>2.拖拽第一张图案到场景中，命名为BasePlatform</p>
<p>3.新建BasePlatform的动画，将四个图案拖拽进动画中并调整采样率</p>
<p>4.为BasePlatform添加碰撞器box collider 2d 并调整碰撞体积</p>
<hr>
<h3 id="二、旋转平台"><a href="#二、旋转平台" class="headerlink" title="二、旋转平台"></a>二、旋转平台</h3><p>1.前面的操作与上述普通平台相同，设置大小，命名，新建动画，添加碰撞器</p>
<p>2.为了实现平台被碰撞时发生翻转，添加组件hinge joint 2d，可以设置旋转角度和速度等</p>
<p>自动添加了rigidbody 2d，但是不取消也不会掉下来，为什么呢？</p>
<p>猜测是joint关节会固定在背景里，超过一定的力才会 “脱臼”</p>
<hr>
<h3 id="三、弹跳平台"><a href="#三、弹跳平台" class="headerlink" title="三、弹跳平台"></a>三、弹跳平台</h3><p>1.找到pixel adventure 1 → assets → traps → fan ，设置大小，命名，添加碰撞器</p>
<p>2.这里新建两个动画，一个是静止时的动画，一个是启动时的动画（弹跳）</p>
<p>3.新建脚本，实现碰撞时平台切换到弹跳动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class FanRun : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    Animator animator;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    private void OnCollisionEnter2D(Collision2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        if (collision.gameObject.CompareTag(&quot;Player&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animator.Play(&quot;Fan_run&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当标签为Player的物体碰撞到此平台时就会切换到启动动画啦</p>
<hr>
<h3 id="四、摆动链锤"><a href="#四、摆动链锤" class="headerlink" title="四、摆动链锤"></a>四、摆动链锤</h3><p>1.新建空物体SpikeBall，分别添加两个子物体pixel adventure 1 → assets → traps → spiked ball → 轴心和大锤</p>
<p>2.调整父子物体的相对位置</p>
<p>3.给大锤添加组件Distance Joint 2D，给轴心添加rigid body 2d并拖拽到大锤的链接体</p>
<p>4.给大锤添加碰撞体circle collider 2d</p>
<hr>
<h3 id="五、脚本实现平台上升"><a href="#五、脚本实现平台上升" class="headerlink" title="五、脚本实现平台上升"></a>五、脚本实现平台上升</h3><p>新建脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlatformUp : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    Vector3 movement;</span><br><span class="line">    public float speed;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        movement.y = speed;</span><br><span class="line">    &#125;</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MovePlatform();</span><br><span class="line">    &#125;</span><br><span class="line">    void MovePlatform()</span><br><span class="line">    &#123;</span><br><span class="line">        transform.position += movement * Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并挂载到所有的平台建筑下，这样就实现了平台的持续上升</p>
<hr>
<h3 id="六、设置平台天花板"><a href="#六、设置平台天花板" class="headerlink" title="六、设置平台天花板"></a>六、设置平台天花板</h3><p>平台总不能一直上升，要设置一个天花板，当平台到达天花板时就摧毁物体</p>
<p>1.新建空物体TopLine移动到上方合适的位置，作为天花板</p>
<p>2.在平台的上升代码中添加判断到达天花板的检测：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlatformUp : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    Vector3 movement;</span><br><span class="line">    public float speed;</span><br><span class="line">    GameObject topLine;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        movement.y = speed;</span><br><span class="line">        topLine = GameObject.Find(&quot;TopLine&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MovePlatform();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void MovePlatform()</span><br><span class="line">    &#123;</span><br><span class="line">        transform.position += movement * Time.deltaTime;</span><br><span class="line">        if(transform.position.y &gt; topLine.transform.position.y)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成！平台到位自动销毁</p>
<hr>
<h3 id="终、总结"><a href="#终、总结" class="headerlink" title="终、总结"></a>终、总结</h3><p>平台的制作到这就结束了！用到了几个joint组件，十分有趣</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>c#</tag>
        <tag>joint</tag>
        <tag>collider</tag>
      </tags>
  </entry>
  <entry>
    <title>C++STL</title>
    <url>/2021/07/09/%E6%9B%B42021-07-09-C++STL/</url>
    <content><![CDATA[<h3 id="始、STL初识"><a href="#始、STL初识" class="headerlink" title="始、STL初识"></a>始、STL初识</h3><p>STL(standard template library)标准模板库</p>
<p>广义上分为容器、算法、迭代器（容器和算法之间通过迭代器无缝连接）</p>
<p>六大组件：容器、算法、迭代器、仿函数、适配器、空间配置器</p>
<p>​    <strong>容器</strong>：vector、list、deque、set、map等</p>
<p>​    <strong>算法</strong>(Algorithms)：sort、find、copy、for_each等</p>
<p>​    <strong>迭代器</strong>：扮演容器与算法之间的胶合剂（每个容器都有自己专属的迭代器），迭代器可以理解成<strong>指针</strong></p>
<p>​    <strong>仿函数</strong>：类似函数，可作为算法的某种策略</p>
<!---more--->

<hr>
<h3 id="一、vector容器"><a href="#一、vector容器" class="headerlink" title="一、vector容器"></a>一、vector容器</h3><p>vector容器可以理解成<strong>数组</strong></p>
<p>初始化：<code>vector&lt;数据类型&gt; 容器名 (容器大小)</code></p>
<p>容器输入：<code>容器名. push_back(数据)</code>，尾插法插入数据</p>
<p>起始迭代器：<code>容器名. begin()</code>，指向第一个元素</p>
<p>结束迭代器：<code>容器名. end()</code>，指向最后一个元素的下一个位置</p>
<p>自定义专属迭代器：<code>vector&lt;数据类型&gt; : : iterator 迭代器名</code></p>
<p>遍历算法：<code>for_each</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for_each(InputIterator beg, InputIterator end, Function f) &#123;</span><br><span class="line">  while(beg != end) </span><br><span class="line">    f(*beg++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="二、map-multimap容器"><a href="#二、map-multimap容器" class="headerlink" title="二、map/multimap容器"></a>二、map/multimap容器</h3><p>map容器可以理解成<strong>哈希表</strong></p>
<p><strong>map中每个元素都是pair(对组元素)</strong></p>
<p>pair中第一个元素为key(键值)，第二个元素为value(实值)</p>
<p>所有元素会根据键值自动排序</p>
<p>map不允许容器中有重复的key值</p>
<p>multimap允许容器中有重复的key值</p>
<p>默认构造：<code>map&lt;key类型, value类型&gt; 容器名</code></p>
<p>拷贝构造：<code>map&lt;key类型, value类型&gt; 容器名 (拷贝容器名)</code></p>
<p>赋值：<code>容器名 = 目标容器名</code></p>
<p>插入数据：<code>容器名. insert(pair&lt;key类型, value类型&gt;(key, value))</code></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>map</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>再临Unity</title>
    <url>/2021/07/08/2021-07-08-%E5%86%8D%E4%B8%B4Unity/</url>
    <content><![CDATA[<h1 id="淦！"><a href="#淦！" class="headerlink" title="淦！"></a>淦！</h1><h3 id="始、整理"><a href="#始、整理" class="headerlink" title="始、整理"></a>始、整理</h3><p>​    闲来无事，想捣鼓一下unity，打开界面一脸懵逼。明明大学玩过一段时间的，这知识咋就不进脑子呢，又得重新学习</p>
<!---more--->

<hr>
<h3 id="一、Unity快速入门"><a href="#一、Unity快速入门" class="headerlink" title="一、Unity快速入门"></a>一、Unity快速入门</h3><p>​    unity的布局和一些用过的工具多少有些联系，搞懂界面还是不难的，先从常用操作入手吧！正好找到一个最近的精简unity入门视频：</p>
<p><a href="ttps://www.bilibili.com/video/BV1Yh411h7zk?p=2">游戏开发-Unity 光速入门</a></p>
<hr>
<h3 id="二、C"><a href="#二、C" class="headerlink" title="二、C#"></a>二、C#</h3><p>​    unity脚本编写用到c#，这语言光说入门还是比较轻松的：</p>
<p><a href="https://www.bilibili.com/video/BV1sy4y1u7cw">快速学完C#编程</a></p>
<hr>
<h3 id="三、像素画资源"><a href="#三、像素画资源" class="headerlink" title="三、像素画资源"></a>三、像素画资源</h3><p>​    做点2D像素风练练手，资源就用PS自己画吧：</p>
<p><a href="https://www.bilibili.com/video/BV1o4411V7dv">使用Photoshop绘制像素画</a></p>
<hr>
<h3 id="四、教程视频"><a href="#四、教程视频" class="headerlink" title="四、教程视频"></a>四、教程视频</h3><p>M大的教学对新手玩家真的友好，不愧是unity官方认证</p>
<p><a href="https://space.bilibili.com/370283072?spm_id_from=333.788.b_636f6d6d656e74.1">M_Studio的个人空间</a></p>
]]></content>
      <categories>
        <category>琐碎</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>c#</tag>
        <tag>ps</tag>
        <tag>像素</tag>
      </tags>
  </entry>
  <entry>
    <title>和相同的二元子数组</title>
    <url>/2021/07/08/2021-07-08-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="题目：和相同的二元子数组（力扣）"><a href="#题目：和相同的二元子数组（力扣）" class="headerlink" title="题目：和相同的二元子数组（力扣）"></a>题目：和相同的二元子数组（力扣）</h3><p>​    给你一个二元数组 <code>nums</code> ，和一个整数 <code>goal</code> ，请你统计并返回有多少个和为 <code>goal</code> 的 <strong>非空</strong> 子数组。</p>
<p>​    <strong>子数组</strong> 是数组的一段连续部分。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,1,0,1], goal = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]</span><br></pre></td></tr></table></figure>

<!---more--->

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0,0,0], goal = 0</span><br><span class="line">输出：15</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<ul>
<li><p><code>1 &lt;= nums.length &lt;= 3 * 104</code></p>
</li>
<li><p><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></p>
</li>
<li><p><code>0 &lt;= goal &lt;= nums.length</code></p>
</li>
</ul>
<hr>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //滑动窗口法</span><br><span class="line">    //右指针逐渐向右，左一指针找到第一个符合的位置，左二指针找到最后一个符合的位置</span><br><span class="line">    int numSubarraysWithSum(vector&lt;int&gt;&amp; nums, int goal) &#123;</span><br><span class="line">        int left1 = 0, left2 = 0;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        int sum1 = 0, sum2 = 0;</span><br><span class="line">        int ret = 0;</span><br><span class="line"></span><br><span class="line">        for(int right = 0; right &lt; n; right++)&#123;</span><br><span class="line">            sum2 += nums[right];</span><br><span class="line">            sum1 += nums[right];</span><br><span class="line">            while(left2 &lt;= right &amp;&amp; sum2 &gt;= goal)&#123;</span><br><span class="line">                sum2 -= nums[left2];</span><br><span class="line">                left2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while(left1 &lt; left2 &amp;&amp; sum1 &gt; goal)&#123;</span><br><span class="line">                sum1 -= nums[left1];</span><br><span class="line">                left1++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ret += left2 - left1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h3><p>1.提示2<code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code>，所以不用判断相等的情况<code>if(sum == goal)</code></p>
<p>2.三个只指针对应的大小关系，其中<code>left1 &lt;= left2 &lt;= right &lt;= nums.size()</code></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>滑动窗口法</tag>
      </tags>
  </entry>
  <entry>
    <title>《Speed Down》Unity2d游戏开发（一）</title>
    <url>/2021/07/06/2021-07-06-%E3%80%8ASpeed%20Down%E3%80%8BUnity2d%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="始、版本"><a href="#始、版本" class="headerlink" title="始、版本"></a>始、版本</h3><p>unity 2021.1.12f1c1</p>
<p>unityhub 2.4.13</p>
<p>vs 2019</p>
<!---more--->

<hr>
<h3 id="一、导入素材"><a href="#一、导入素材" class="headerlink" title="一、导入素材"></a>一、导入素材</h3><p>1.新建unity2d项目</p>
<p>2.在assetstore中查找 Pixel Adventure 1并添加到我的资源</p>
<p>3.在unity中打开Package Manager → My Assets → Pixel Adventure 1，下载并导入项目中</p>
<p>资源栏就出现这个包啦！</p>
<hr>
<h3 id="二、切换发布平台"><a href="#二、切换发布平台" class="headerlink" title="二、切换发布平台"></a>二、切换发布平台</h3><p>1.点击file → build setting → Android → switch platform</p>
<p>2.发现自己unity没有这个模块，要手动在unityhub安装模块</p>
<p>3.发现没有添加模块的按钮，要移除版本，前往官网找到改版本并选择从unityhub中下载</p>
<p>4.添加下载Android Target Support</p>
<hr>
<h3 id="三、背景图案设置"><a href="#三、背景图案设置" class="headerlink" title="三、背景图案设置"></a>三、背景图案设置</h3><p>1.新建3d object → quad，reset位置，设置scale中x为9，y为16</p>
<p>2.调整主摄像机，包裹场景</p>
<p>3.新建材质球background，修改shader为unlit → texture</p>
<p>4.选择喜欢的背景图案，更改pixel per unit为64，拖到材质球中</p>
<p>5.添加材质球到quad中</p>
<p>6.相机中没有图片，因为相机和场景重叠了，修改相机z轴位置为-10</p>
<p>简单的背景图片出现了，现在想要背景图案变成多个重复的图案，并且可以循环移动：</p>
<p>7.设置图案advanced → wrap mode → repeat，表示图案是可以循环重复的（记得apply）</p>
<p>8.更改材质球的tilling就可以看到场景图案铺垫的样子，可以看到改变offset的值就可以让场景移动</p>
<hr>
<h3 id="四、脚本实现背景移动"><a href="#四、脚本实现背景移动" class="headerlink" title="四、脚本实现背景移动"></a>四、脚本实现背景移动</h3><p>1.新建c#脚本，等unity加载完毕（右下角有转圈标识，没加载完就操作会出现奇怪的错误）</p>
<p>2.编写脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BackgroundMove : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    Material material;</span><br><span class="line">    Vector2 movement;</span><br><span class="line"></span><br><span class="line">    public Vector2 speed;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        material = GetComponent&lt;Renderer&gt;().material;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        movement += speed * Time.deltaTime;</span><br><span class="line">        material.mainTextureOffset = movement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：获取material时是获取组件Renderer中的material，即“material是Renderer的material”</p>
<p>这样就可以通过改变背景脚本一栏中的speed来改变背景移动速度</p>
<hr>
<h3 id="五、添加顶部尖刺"><a href="#五、添加顶部尖刺" class="headerlink" title="五、添加顶部尖刺"></a>五、添加顶部尖刺</h3><p>1.找到素材中的spikes，修改pixel per unit 为16</p>
<p>2.新建空物体TopSpikes用来存储所有的顶部尖刺</p>
<p>3.将尖刺图案拖拽到TopSpikes下方成为子物体</p>
<p>4.修改尖刺的rotation → z 为18翻转尖刺，修改scale → y为2延长图案</p>
<p>5.按住<code>V</code>可以选择锚点对齐放置，<code>ctrl + d</code>复制物体，重复步骤直到填满顶部</p>
<p>6.全选尖刺，添加组件polygon collider 2d 多边形碰撞体，打勾used by composite，即把这些尖刺的碰撞体合并起来</p>
<p>7.添加组件composite collider 2d ，此时会自动添加rigibody 2d</p>
<p>8.将rigibody 2d → body type改为static，这样尖刺就保持在原地不会掉下去</p>
<p>9.调整composite collider 2d → offset 可以改变碰撞体的位置</p>
<hr>
<h3 id="终、未完待续"><a href="#终、未完待续" class="headerlink" title="终、未完待续"></a>终、未完待续</h3><p>基本的场景搭建已经完成！</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>c#</tag>
        <tag>unityhub</tag>
        <tag>2d</tag>
      </tags>
  </entry>
  <entry>
    <title>剪辑视频自我总结</title>
    <url>/2021/07/06/%E6%9B%B42021-07-06-%E5%89%AA%E8%BE%91%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="始、梳理"><a href="#始、梳理" class="headerlink" title="始、梳理"></a>始、梳理</h3><p>1.视频剪辑用强大的<strong>Premiere</strong></p>
<p>2.因为目标是上传B站，而B站有CC字幕功能，可以视频和字幕分开做，减少工作量，这里选择：</p>
<p><a href="https://jianwai.youdao.com/index/0">网易见外工作台 (youdao.com)</a></p>
<p>3.语音不想自己配音，使用了<strong>迅捷文字转换语音</strong></p>
<!---more--->

<hr>
<h3 id="一、精简入门，了解Pr视频剪辑"><a href="#一、精简入门，了解Pr视频剪辑" class="headerlink" title="一、精简入门，了解Pr视频剪辑"></a>一、精简入门，了解Pr视频剪辑</h3><p>自认为学习新的软件使用不能一开始就看官网手册或完整教学，而是先获得一个大概的认知：</p>
<p><a href="%5B10%E5%88%86%E9%92%9F%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bpremiere%E5%89%AA%E8%BE%91%EF%BC%81%E4%BB%85%E5%90%AB1%E5%8F%A5%E5%BA%9F%E8%AF%9D%EF%BC%8C%E5%85%A8%E7%A8%8B%E5%B9%B2%E8%B4%A7%E8%BE%93%E5%87%BA%EF%BC%8C%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3pr%E5%B7%A5%E4%BD%9C%E9%80%BB%E8%BE%91%EF%BC%8C%E6%96%B0%E4%BA%BA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%EF%BC%8C%E7%9C%9F%E7%9A%84%E5%A5%BD%E6%83%B3%E8%AE%A9%E4%BD%A0%E7%9C%8B%E5%88%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%A0%87%E9%A2%98%E5%86%99%E8%BF%99%E4%B9%88%E9%95%BF%E6%9D%A5%E8%A1%A8%E8%BE%BE%E6%BF%80%E5%8A%A8%E7%9A%84%E5%BF%83%E6%83%85_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1h7411U7BX?from=search&seid=11730757113337564851)">10分钟快速上手premiere剪辑！</a></p>
<hr>
<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3>]]></content>
      <categories>
        <category>琐碎</category>
      </categories>
      <tags>
        <tag>pr</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Github无法访问</title>
    <url>/2021/07/06/2021-07-06-%E8%A7%A3%E5%86%B3Github%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h3 id="一、修改host文件"><a href="#一、修改host文件" class="headerlink" title="一、修改host文件"></a>一、修改host文件</h3><p>​    在<strong>C:\Windows\System32\drivers\etc</strong>中打开<strong>host</strong>文件（可以用记事本打开），在该文件中添加如下内容。</p>
<!---more--->

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">140.82.114.4 github.com</span><br><span class="line">140.82.114.4 gist.github.com</span><br><span class="line">185.199.108.153 assets-cdn.github.com</span><br><span class="line">151.101.64.133 raw.githubusercontent.com</span><br><span class="line">151.101.108.133 gist.githubusercontent.com</span><br><span class="line">151.101.108.133 cloud.githubusercontent.com</span><br><span class="line">151.101.108.133 camo.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars2.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars3.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars4.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars5.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars6.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars7.githubusercontent.com</span><br><span class="line">151.101.108.133 avatars8.githubusercontent.com </span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure>

<p>保存文件，再次打开github速度飞快</p>
<hr>
<h3 id="二、win10修改文件读写的权限"><a href="#二、win10修改文件读写的权限" class="headerlink" title="二、win10修改文件读写的权限"></a>二、win10修改文件读写的权限</h3><p>​    windows系统可能遇到无法修改系统文件的问题</p>
<p>​    1.找到要修改的文件</p>
<p>​    2.右键→属性→安全→编辑→user</p>
<p>​    3.在允许编辑那一栏打勾</p>
]]></content>
      <categories>
        <category>琐碎</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客总结</title>
    <url>/2021/07/04/2021-07-04-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="一、用Hexo在本地生成博客并部署（白嫖）到github"><a href="#一、用Hexo在本地生成博客并部署（白嫖）到github" class="headerlink" title="一、用Hexo在本地生成博客并部署（白嫖）到github"></a>一、用Hexo在本地生成博客并部署（白嫖）到github</h3><p>后半部分个性化博客的教学先不看：</p>
<p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p>
 <span id="more"></span>

<hr>
<h3 id="二、将博客的源代码也放到github托管"><a href="#二、将博客的源代码也放到github托管" class="headerlink" title="二、将博客的源代码也放到github托管"></a>二、将博客的源代码也放到github托管</h3><p>文章最后面还有作者引用的原文，两篇文章结合一起看：</p>
<p><a href="https://www.jianshu.com/p/baab04284923">Hexo | 怎么去备份你的Hexo博客</a></p>
<hr>
<h3 id="三、最后就是用我们的Typora来写作啦"><a href="#三、最后就是用我们的Typora来写作啦" class="headerlink" title="三、最后就是用我们的Typora来写作啦"></a>三、最后就是用我们的Typora来写作啦</h3><p>快捷键记不记无所谓，typora工具栏全都有：</p>
<p><a href="https://zhuanlan.zhihu.com/p/156915260">Hexo博客写文章及基本操作</a></p>
<hr>
<h3 id="四、应用next主题以及个性化"><a href="#四、应用next主题以及个性化" class="headerlink" title="四、应用next主题以及个性化"></a>四、应用next主题以及个性化</h3><p>next和hexo好像还有版本适配的问题，我用旧版的next会把博客变成乱码，最终是这篇文章中的新版本适合我：</p>
<p><a href="https://zhuanlan.zhihu.com/p/60424755">hexo的next主题个性化配置</a></p>
<hr>
<h3 id="终、报错汇总"><a href="#终、报错汇总" class="headerlink" title="终、报错汇总"></a>终、报错汇总</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git g -d  </span><br></pre></td></tr></table></figure>

<p>报错：<strong>fatal:  unable to access ‘h…://github.com/….github.io.git/</strong></p>
<p>原因是git的代理出现问题？解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset git.proxy</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>琐碎</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>typora</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
